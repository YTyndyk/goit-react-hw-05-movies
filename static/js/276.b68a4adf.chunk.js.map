{"version":3,"file":"static/js/276.b68a4adf.chunk.js","mappings":"2NAAaA,EAAc,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAC5B,OACE,wBACGA,EAAQC,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACX,2BACE,wBAAKD,KACL,uBAAIC,GAAoB,UAFjBF,EADE,KAQlB,ECPOG,EAAcC,EAAQ,IAAtBD,UAeR,EAbgB,WACd,OAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOP,EAAP,KAAgBQ,EAAhB,KACQC,EAAYJ,IAAZI,QAIR,OAHAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAgBF,GAASG,MAAK,gBAAGC,EAAH,EAAGA,QAAH,OAAiBL,EAAWK,EAA5B,GAC/B,GAAE,CAACJ,IACsB,IAAnBT,EAAQc,QACb,uBAAG,6CAEH,SAACf,EAAD,CAAaC,QAASA,GAEzB,C,8LCfDe,EAAAA,EAAAA,SAAAA,QAAA,+BACAA,EAAAA,EAAAA,SAAAA,OAAwB,CACtBC,QAAQ,mCACRC,eAAe,GAGV,IAAMC,EAAW,mCAAG,6GAAOC,EAAP,+BAAc,EAAGC,EAAjB,yCAEAL,EAAAA,EAAAA,IAAU,sBAAuB,CACtDM,OAAQ,CACNF,KAAAA,EACAG,SAAUF,KALS,uBAEfG,EAFe,EAEfA,KAFe,kBAQhBA,GARgB,wCAUjB,IAAIC,MAAM,4BAVO,0DAAH,qDAaXC,EAAc,mCAAG,2GAAOC,EAAP,+BAAe,GAAf,kBAEHX,EAAAA,EAAAA,IAAA,qCACSW,EADT,iBAFG,uBAElBH,EAFkB,EAElBA,KAFkB,kBAKnBA,GALmB,sCAOpB,IAAIC,MAAM,2BAPU,yDAAH,qDAUdG,EAAY,mCAAG,WAAMzB,GAAN,kGAEDa,EAAAA,EAAAA,IAAA,iBAAoBb,EAApB,iBAFC,uBAEhBqB,EAFgB,EAEhBA,KAFgB,kBAGjBA,GAHiB,sCAKlB,IAAIC,MAAM,2BALQ,yDAAH,sDAQZI,EAAe,mCAAG,WAAM1B,GAAN,kGAEJa,EAAAA,EAAAA,IAAA,iBAAoBb,EAApB,yBAFI,uBAEnBqB,EAFmB,EAEnBA,KAFmB,kBAGpBA,GAHoB,sCAKrB,IAAIC,MAAM,2BALW,yDAAH,sDAQfb,EAAe,mCAAG,WAAMT,GAAN,kGAEJa,EAAAA,EAAAA,IAAA,iBAAoBb,EAApB,yBAFI,uBAEnBqB,EAFmB,EAEnBA,KAFmB,kBAGpBA,GAHoB,sCAKrB,IAAIC,MAAM,2BALW,yDAAH,qD","sources":["components/ReviewsList/ReviewsList.js","components/Reviews.js","components/Services/themoviedbAPI.js/ThemoviedbAPI.js"],"sourcesContent":["export const ReviewsList = ({ reviews }) => {\n  return (\n    <ul>\n      {reviews.map(({ id, author, content }) => (\n        <li key={id}>\n          <h3>{author}</h3>\n          <p>{content ? content : '...'}</p>\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import React from 'react';\nimport { useEffect, useState } from 'react';\nimport { getMovieReviews } from 'components/Services/themoviedbAPI.js/ThemoviedbAPI';\nimport { ReviewsList } from './ReviewsList/ReviewsList';\nconst { useParams } = require('react-router-dom');\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const { movieId } = useParams();\n  useEffect(() => {\n    getMovieReviews(movieId).then(({ results }) => setReviews(results));\n  }, [movieId]);\n  return reviews.length === 0 ? (\n    <p>We don't have any reviews of this movie</p>\n  ) : (\n    <ReviewsList reviews={reviews} />\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\naxios.defaults.baseURL = `https://api.themoviedb.org/3`;\naxios.defaults.params = {\n  api_key: `80849c20aa63241eb028c4e7b7d0f3a8`,\n  include_adult: false,\n};\n\nexport const getTrending = async (page = 1, lng) => {\n  try {\n    const { data } = await axios.get('/trending/movie/day', {\n      params: {\n        page,\n        language: lng,\n      },\n    });\n    return data;\n  } catch (error) {\n    throw new Error('Oops, there is no movies');\n  }\n};\nexport const getMovieSearch = async (query = '') => {\n  try {\n    const { data } = await axios.get(\n      `/search/movie?page=1&query=${query}&language=en`\n    );\n    return data;\n  } catch (error) {\n    throw new Error('Oops, there is no movie');\n  }\n};\nexport const getMovieById = async id => {\n  try {\n    const { data } = await axios.get(`/movie/${id}?language=en`);\n    return data;\n  } catch (error) {\n    throw new Error('Oops, there is no movie');\n  }\n};\nexport const getMovieCredits = async id => {\n  try {\n    const { data } = await axios.get(`/movie/${id}/credits?language=en`);\n    return data;\n  } catch (error) {\n    throw new Error('Oops, there is no movie');\n  }\n};\nexport const getMovieReviews = async id => {\n  try {\n    const { data } = await axios.get(`/movie/${id}/reviews?language=en`);\n    return data;\n  } catch (error) {\n    throw new Error('Oops, there is no movie');\n  }\n};\n"],"names":["ReviewsList","reviews","map","id","author","content","useParams","require","useState","setReviews","movieId","useEffect","getMovieReviews","then","results","length","axios","api_key","include_adult","getTrending","page","lng","params","language","data","Error","getMovieSearch","query","getMovieById","getMovieCredits"],"sourceRoot":""}